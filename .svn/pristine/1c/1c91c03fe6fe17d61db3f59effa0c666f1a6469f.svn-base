/**
 * Created by bizic on 28/8/2016.
 */
(function () {
    'use strict';

    angular.module('PDMA.PeerOutreach').controller('PEIndexController', PEIndexController);

    PEIndexController.$inject = [
        '$rootScope',
        '$scope',
        '$http',
        '$timeout',
        'settings',
        'PEIndexService',
        '$state',
        '$uibModal',
        'blockUI',
        'toastr',
        'focusFlatPick'
    ];

    function PEIndexController($rootScope, $scope, $http, $timeout, settings, service, $state, modal, blockUI, toastr, focusFlatPick) {
        $scope.$on('$viewContentLoaded', function () {
            // initialize core components
            App.initAjax();
        });

        // set sidebar closed and body solid layout mode
        $rootScope.settings.layout.pageContentWhite = true;
        $rootScope.settings.layout.pageBodySolid = false;
        $rootScope.settings.layout.pageSidebarClosed = true;
        
        blockUI.start();
        $scope.$watch('currentUser.loaded', function (newVal, old) {
            if (!newVal) {
                return;
            }

            blockUI.stop();

            if (!($scope.isSiteManager($scope.currentUser) || $scope.isProvincialManager($scope.currentUser))) {
                $state.go('application.prev_dashboard');
            }
        });

        var vm = this;

        vm.entries = [];
        vm.selectedEntries = [];
        vm.modalInstance=null;

        vm.numberOfDays = 30;

        vm.filter = {
            pageIndex: 0,
            pageSize: 25
        };
        
        vm.filter1 = {
            pageIndex: 0,
            pageSize: 25
        };

        $scope.deletePE = function (id) {
            vm.modalInstance = modal.open({
                animation: true,
                templateUrl: 'delete_entry_modal.html',
                scope: $scope,
                size: 'md',
                backdrop: 'static',
                keyboard: false
            });

            vm.modalInstance.result.then(function (answer) {
                if (answer == 'yes') {
                    blockUI.start();
                    // service.getEntry(id, function success() {
                    // }, function failure() {
                    //     blockUI.stop();
                    // }).then(function (data) {
                    //     blockUI.stop();
                    //     let c1ConvertToDate = new Date(data.c1);
                    //     let c1Convert = c1ConvertToDate.getMonth()+1;
                    //     let calculateQuarter = null;
                    //     if(c1Convert>0 && c1Convert<4) {
                    //         calculateQuarter = 1;
                    //     } else if(c1Convert>3 && c1Convert<7) {
                    //         calculateQuarter = 2;
                    //     } else if(c1Convert>6 && c1Convert<10) {
                    //         calculateQuarter = 3;
                    //     } else if(c1Convert>9 && c1Convert<13) {
                    //         calculateQuarter = 4;
                    //     }
                    //     let changeByQuarter = new Date(c1ConvertToDate.getFullYear(), c1ConvertToDate.getMonth(), c1ConvertToDate.getDate());
                    //     if(calculateQuarter == 1) {
                    //         changeByQuarter.setMonth(2);
                    //         changeByQuarter.setDate(vm.numberOfDays);
                    //     } else if(calculateQuarter == 2) {
                    //         changeByQuarter.setMonth(5);
                    //         changeByQuarter.setDate(vm.numberOfDays);
                    //     } else if(calculateQuarter == 3) {
                    //         changeByQuarter.setMonth(8);
                    //         changeByQuarter.setDate(vm.numberOfDays);
                    //     } else if(calculateQuarter == 4) {
                    //         changeByQuarter.setMonth(11);
                    //         changeByQuarter.setDate(vm.numberOfDays);
                    //     }
                    //     let isAdministrator = $scope.isAdministrator($scope.currentUser);
                    //     if(!isAdministrator) {
                    //         if((new Date()) > changeByQuarter) {
                    //             toastr.warning("Đã quá thời hạn chỉnh sửa phiếu","Thông báo");
                    //             return;
                    //         }
                    //     }
                        service.deleteEntries(id, function success(data) {
                            blockUI.stop();
                        }, function failure(data) {
                            blockUI.stop();
                            toastr.error('Có lỗi xảy ra khi xoá bản ghi.', 'Thông báo');
                        }).then(function (data) {
                            if(data.code=='YES'){
                                toastr.info(data.message, 'Thông báo');
                            }
                            else {
                                vm.alertContent = data.message;
                                vm.modalInstance = modal.open({
                                    animation: true,
                                    templateUrl: '_alert_modal.html',
                                    scope: $scope,
                                    size: 'md',
                                    backdrop: 'static',
                                    keyboard: false
                                });
    //                            toastr.error(data.message, 'Thông báo');
                            }
                            vm.getEntries();
                        });
                    // })
                    
                    
                }
//                 if (answer == 'yes') {
//                     blockUI.start();
//                     service.deleteEntries(id, function success(data) {
//                         blockUI.stop();
//                     }, function failure(data) {
//                         blockUI.stop();
//                         toastr.error('Có lỗi xảy ra khi xoá bản ghi.', 'Thông báo');
//                     }).then(function (data) {
//                         if(data.code=='YES'){
//                             toastr.info(data.message, 'Thông báo');
//                         }
//                         else {
//                             vm.alertContent = data.message;
//                             vm.modalInstance = modal.open({
//                                 animation: true,
//                                 templateUrl: '_alert_modal.html',
//                                 scope: $scope,
//                                 size: 'md',
//                                 backdrop: 'static',
//                                 keyboard: false
//                             });
// //                            toastr.error(data.message, 'Thông báo');
//                         }
//                         vm.getEntries();
//                     });
//                 }
            });
        };

        vm.getEntry = function () {
            // block the view with a loading indicator

            vm.id = $stateParams.id;

        };

        vm.orgsWritable=[];
        $scope.$watch('assignedOrgs.initialized', function (newVal, oldVal) {
            if (newVal == true) {
                vm.orgsWritable = $scope.assignedOrgs.writable;
                if (vm.orgsWritable && vm.orgsWritable.length == 1) {
                    vm.currentOrg = vm.orgsWritable[0];
                    vm.filter.org=vm.orgsWritable[0];
                }
            }
        });

        $scope.$watch('vm.filter.org', function (newVal, oldVal) {
            vm.getListStaff();
        });
        vm.getListStaff = function () {
            blockUI.start();
            let orgFilter={organization: vm.filter.org};

            service.getListStaff(orgFilter, function success() {
            }, function failure() {
                blockUI.stop();
            }).then(function (data) {
                //console.log("c3",data);
                vm.staffs = data.content;
                blockUI.stop();
            });
        };

        vm.openAddPE = function () {
            $state.go('application.pe_add');
        };

        vm.getEntries = function () {
            //blockUI.start();
            service.getAllEntries(vm.filter, function success() {
            }, function failure() {
                //blockUI.stop();
            }).then(function (data) {
                //vm.treeData = data.content;
                //console.log(data);
                let isSiteManager = $scope.isSiteManager($scope.currentUser);
                vm.bsTableControl.options.columns = service.getTableDefinition(isSiteManager);
                vm.bsTableControl.options.data = data.content;
                vm.bsTableControl.options.totalRows = data.totalElements;
                //blockUI.stop();
            });
        }
        vm.getEntries();
        
        vm.getEntries1 = function () {
            //blockUI.start();
            service.getAllEntries(vm.filter1, function success() {
            }, function failure() {
                //blockUI.stop();
            }).then(function (data) {
                //vm.treeData = data.content;
                //console.log(data);
                let isSiteManager = $scope.isSiteManager($scope.currentUser);
                vm.bsTableControl.options.columns = service.getTableDefinition(isSiteManager);
                vm.bsTableControl.options.data = data.content;
                vm.bsTableControl.options.totalRows = data.totalElements;
                //blockUI.stop();
            });
        }
        vm.getEntries1();

        vm.filterTypes = [
            {name:'Tất cả khách hàng',val:9},
            {name:'Khách hàng có tình trạng HIV dương tính khi tiếp cận',val:1},
            {name:'Khách hàng đồng ý cung cấp thông tin BT/BC',val:2},
            {name:'Khách hàng đồng ý xét nghiệm HIV',val:3},
            {name:'Khách hàng có phản ứng HIV dương tính',val:4},
            {name:'Khách hàng có kết quả khẳng định HIV dương tính',val:5},
            {name:'Khách hàng Dương tính được tính cho chỉ tiêu MER',val:6},
            {name:'Khách hàng sử dụng dịch vụ điều trị ARV',val:7},
            {name:'Khách hàng sử dụng dịch vụ điều trị PrEP',val:8},
        ];
        
        vm.openAdvancedSearch = function (focusOnElement) {
            vm.modalInstance = modal.open({
                animation: true,
                templateUrl: '_advance_search_modal.html',
                scope: $scope,
                size: 'md',
                backdrop: 'static',
                keyboard: false
            });

            vm.modalInstance.result.then(function (answer) {
                if (answer == 'yes') {
                    vm.isFiltered=true;
                    vm.getEntries();
                }
                else if(answer == 'no'){
                    vm.filter = {
                        pageIndex: 0,
                        pageSize: 25,
                        keyword: null
                    };
                    vm.getEntries();
                }
            });

            vm.modalInstance.closed.then(function (data) {
                // TODO
                vm.isFiltered =
                (vm.filter.org)
                || (vm.filter.staff)
            });
        };
        vm.clearSearch = function(){
            vm.isFiltered=false;
            vm.filter = {
                pageIndex: 0,
                pageSize: 25,
                keyword: null
            };
            vm.getEntries();
        }
        $scope.$watch('vm.filter', function(newVal, oldVal) {

        });

        vm.openSearch = function() {
            if(vm.filter1.fromDate && vm.filter1.toDate) {
                if(new Date(vm.filter1.toDate)<new Date(vm.filter1.fromDate)) {
                    toastr.warning('Ngày kết thúc không được nhỏ hơn ngày bắt đầu');
                    return;
                }
            }
            vm.getEntries1();
        }

        vm.exportPE = function () {
            let successHandler = function (data, status, headers, config) {
                blockUI.stop();

                headers = headers();

                let filename = headers['x-filename'];
                let contentType = headers['content-type'];

                let linkElement = document.createElement('a');
                try {
                    let blob = new Blob([data], {type: contentType});
                    let url = window.URL.createObjectURL(blob);

                    linkElement.setAttribute('href', url);
                    linkElement.setAttribute("download", filename);

                    let clickEvent = new MouseEvent("click", {
                        "view": window,
                        "bubbles": true,
                        "cancelable": false
                    });
                    linkElement.dispatchEvent(clickEvent);
                } catch (ex) {
                    console.log(ex);
                }
            };
            
            blockUI.start();
            service.exportPE(vm.filter1)
            .success(successHandler)
            .error(function () {
                blockUI.stop();
            });
        };

        vm.fromDateReport = {
            fpItem: null,
            dateOpts: {
                altFormat: 'd/m/Y',
                altInput: true,
                dateFormat: 'Y-m-dTH:i:S',
                enableTime: false,
                placeholder: 'Chọn ngày..',
                plugins: [new scrollPlugin({}), new monthSelectPlugin({
                    shorthand: true, //defaults to false
                    // dateFormat: 'm/Y', //defaults to "F Y"
                    // altFormat: 'm/Y', //defaults to "F Y"
                    dateFormat: "Y-m-dTH:i:S", //defaults to "F Y"
                    altFormat: "m/Y", //defaults to "F Y"
                })],
                shorthandCurrentMonth: false,
                locale: 'vn',
                position: 'auto',
                disable: [
                    function(date) {
                        // return true to disable
                        // console.log(date);
                        return (date > new Date());
                    }
                ],
                onChange: [function() {
                    const d = this.selectedDates[0];
                    if (d && _.isDate(d)) {
                        const m = moment(d, 'YYYY-MM-DD');
                        vm.filter1.fromDate = m.add(7, 'hours').toDate();
                    }
                    if(new Date(vm.filter1.fromDate)>new Date()){
                        toastr.warning('Ngày chọn báo cáo không được lớn hơn ngày hiện tại');
                        focusFlatPick('vm.filter1.fromDate');
                        return;
                    }
                    // console.log("duc");
                    console.log(new Date(vm.filter1.fromDate));
                    // console.log(new Date(vm.filter1.toDate));
                    if(new Date(vm.filter1.toDate) < new Date(vm.filter1.fromDate) && vm.filter1.toDate){
                        toastr.warning('Ngày kết thúc không được nhỏ hơn ngày bắt đầu');
                        focusFlatPick('vm.filter1.fromDate');
                    }
                    
                }],
            },
            datePostSetup: function(fpItem) {
                vm.fromDateReport.fpItem = fpItem;
                if (vm.filter1.fromDate && fpItem) {
                    fpItem.setDate(moment(vm.filter1.fromDate).toDate());
                }
            },
            clear: function() {
                if (vm.fromDateReport.fpItem) {
                    vm.fromDateReport.fpItem.clear();
                    vm.filter1.fromDate = null;
                }
            }
        };

        vm.toDateReport = {
            fpItem: null,
                dateOpts: {
                    altFormat: 'd/m/Y',
                    altInput: true,
                    dateFormat: 'Y-m-dTH:i:S',
                    enableTime: false,
                    placeholder: 'Chọn ngày..',
                    plugins: [new scrollPlugin({}), new monthSelectPlugin({
                        shorthand: true, //defaults to false
                        // dateFormat: 'm/Y', //defaults to "F Y"
                        // altFormat: 'm/Y', //defaults to "F Y"
                        dateFormat: "Y-m-dTH:i:S", //defaults to "F Y"
                        altFormat: "m/Y", //defaults to "F Y"
                    })],
                    shorthandCurrentMonth: false,
                    locale: 'vn',
                    position: 'auto',
                    disable: [
                        function(date) {
                            // return true to disable
                            return (date > new Date());
                        }
                    ],
                    onChange: [function() {
                        const d = this.selectedDates[0];
                        if (d && _.isDate(d)) {
                            const m = moment(d, 'YYYY-MM-DD');
                            vm.filter1.toDate = m.add(7, 'hours').toDate();
                        }
                        if(new Date(vm.filter1.toDate)>new Date()){
                            toastr.warning('Ngày chọn báo cáo không được lớn hơn ngày hiện tại');
                            focusFlatPick('vm.filter1.toDate');
                        }
                        // console.log("duc");
                        // console.log(new Date(vm.filter1.fromDate));
                        console.log(new Date(vm.filter1.toDate));
                        if(new Date(vm.filter1.toDate)<new Date(vm.filter1.fromDate) && vm.filter1.fromDate){
                            toastr.warning('Ngày kết thúc không được nhỏ hơn ngày bắt đầu');
                            focusFlatPick('vm.filter1.toDate');
                        }
                    }],
                },
                datePostSetup: function(fpItem) {
                    vm.toDateReport.fpItem = fpItem;
                    if (vm.filter1.toDate && fpItem) {
                        fpItem.setDate(moment(vm.filter1.toDate).toDate());
                    }
                },
                clear: function() {
                    if (vm.toDateReport.fpItem) {
                        vm.toDateReport.fpItem.clear();
                        vm.filter1.toDate = null;
                    }
                }
        };

        $scope.sort = function (col) {
            if (col) {
                vm.filter.sortField = col;
                vm.getEntries();
            }
        };

        vm.bsTableControl = {
            options: {
                data: vm.entries,
                idField: 'id',
                sortable: true,
                striped: true,
                maintainSelected: true,
                clickToSelect: false,
                showColumns: false,
                showToggle: false,
                pagination: true,
                pageSize: vm.filter.pageSize,
                pageList: [5, 10, 25, 50, 100],
                locale: settings.locale,
                sidePagination: 'server',
                // height: 400,
                columns: service.getTableDefinition(),
                onCheck: function (row, $element) {
                    $scope.$apply(function () {
                        vm.selectedEntries.push(row);
                    });
                },
                onCheckAll: function (rows) {
                    $scope.$apply(function () {
                        vm.selectedEntries = rows;
                    });
                },
                onUncheck: function (row, $element) {
                    let index = utils.indexOf(row, vm.selectedEntries);
                    if (index >= 0) {
                        $scope.$apply(function () {
                            vm.selectedEntries.splice(index, 1);
                        });
                    }
                },
                onUncheckAll: function (rows) {
                    $scope.$apply(function () {
                        vm.selectedEntries = [];
                    });
                },
                onPageChange: function (index, pageSize) {
                    vm.filter.pageSize = pageSize;
                    vm.filter.pageIndex = index - 1;

                    vm.getEntries();
                }
            }
        };
    }

})();
