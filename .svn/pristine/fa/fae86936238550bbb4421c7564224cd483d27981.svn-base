/**
 * Created by bizic on 28/8/2016.
 */
(function () {
    'use strict';

    angular.module('PDMA.HTS').controller('HtsListingController', HtsListingController);

    HtsListingController.$inject = [
        '$rootScope',
        '$scope',
        '$http',
        '$timeout',
        'settings',
        'IndexService',
        '$state',
        '$uibModal',
        'blockUI',
        'toastr',
        'focusFlatPick'
    ];

    function HtsListingController($rootScope, $scope, $http, $timeout, settings, service,$state,modal,blockUI,toastr,focusFlatPick) {
        $scope.$on('$viewContentLoaded', function () {
            // initialize core components
            App.initAjax();
        });

        // set sidebar closed and body solid layout mode
        $rootScope.settings.layout.pageContentWhite = true;
        $rootScope.settings.layout.pageBodySolid = false;
        $rootScope.settings.layout.pageSidebarClosed = true;

        var vm = this;

        vm.entries = [];
        vm.selectedEntries = [];
        vm.modalInstance=null;

        vm.filter = {
            pageIndex: 0,
            pageSize: 25,
            keyword: null
        };

        vm.c24Values=[
            {id:1,name:'Khách hàng dương tính mới',isCheck:false,val:'answer1'},
            {id:2,name:'Khách hàng dương tính cũ',isCheck:false,val:'answer2'},
            {id:3,name:'Đang chờ kết quả xác minh',isCheck:false,val:'answer3'}
        ];

        vm.openAdvancedSearch = function (focusOnElement) {
            vm.modalInstance = modal.open({
                animation: true,
                templateUrl: '_advance_search_modal.html',
                scope: $scope,
                size: 'md',
                backdrop: 'static',
                keyboard: false
            });

            vm.modalInstance.result.then(function (answer) {
                if (answer == 'yes') {
                    vm.isFiltered=true;
                    vm.getEntries();
                }
                else if(answer == 'no'){
                    vm.filter = {
                        pageIndex: 0,
                        pageSize: 25,
                        keyword: null
                    };
                    vm.getEntries();
                }
            });

            vm.modalInstance.closed.then(function (data) {
                // TODO
                vm.isFiltered =
                (vm.filter.org)
                || (vm.filter.staff)
                || (vm.filter.toDate)
                || (vm.filter.fromDate);
            });
        };
        vm.clearSearch = function(){
            vm.isFiltered=false;
            vm.filter = {
                pageIndex: 0,
                pageSize: 25,
                keyword: null
            };
            vm.getEntries();
        }
        $scope.$watch('vm.filter', function(newVal, oldVal) {

        });



        vm.displayValue = function (field, val) {
            console.log(val);
            switch (field) {
                case 'gender':
                    if (val == 'MALE') {
                        return 'Nam';
                    }
                    else if (val == 'FEMALE') {
                        return 'Nữ';
                    }
                    else if (val == 'OTHER') {
                        return 'Khác';
                    }
                    break;
            }
            return 'Khác';
        }


        $scope.deleteHTS = function (id) {

            vm.modalInstance = modal.open({
                animation: true,
                templateUrl: 'delete_entry_modal.html',
                scope: $scope,
                size: 'md',
                backdrop: 'static',
                keyboard: false
            });

            vm.modalInstance.result.then(function (answer) {
                if (answer == 'yes') {
                    blockUI.start();
                    service.deleteEntries(id, function success(data) {
                        blockUI.stop();
                    }, function failure(data) {
                        blockUI.stop();
                        toastr.error('Có lỗi xảy ra khi xoá bản ghi.', 'Thông báo');
                    }).then(function (data) {
                        // reload the grid
                        //console.log("mess",data);
                        if(data.code=='YES'){
                            toastr.info(data.message, 'Thông báo');
                        }
                        else {
                            vm.alertContent = data.message;
                            vm.modalInstance = modal.open({
                                animation: true,
                                templateUrl: '_alert_modal.html',
                                scope: $scope,
                                size: 'md',
                                backdrop: 'static',
                                keyboard: false
                            });
//                            toastr.error(data.message, 'Thông báo');
                        }
                        vm.getEntries();
                    });
                }
            });
        };

        $scope.updateHTS = function (id) {
            if(id){
                blockUI.start();
                service.getEntry(id, function success() {
                }, function failure() {
                  blockUI.stop();
                }).then(function (data) {
                    vm.entry=data;
                    blockUI.stop();
                    vm.modalInstance = modal.open({
                        animation: true,
                        templateUrl: 'update_c24_modal.html',
                        scope: $scope,
                        size: 'lg',
                        backdrop: 'static',
                        keyboard: false
                    });
                    vm.modalInstance.result.then(function (answer) {
                        if (answer == 'yes') {
//                            alert('yes');
                            service.updateC24(vm.entry, function success() {
                                blockUI.stop();
                                toastr.info('Bạn đã lưu thành công', 'Thông báo');
                            }, function failure() {
                                blockUI.stop();
                                toastr.error('Có lỗi xảy ra khi lưu thông tin', 'Thông báo');
                            }).then(function (data) {
                                blockUI.stop();
                                toastr.info('Bạn đã lưu thành công', 'Thông báo');
                                $state.go('application.hts');
                            });

                        }
                    });
                });
            };
        };

        vm.getEntry = function () {
            // block the view with a loading indicator

            vm.id = $stateParams.id;

        };

        vm.orgsWritable=[];
        $scope.$watch('assignedOrgs.initialized', function (newVal, oldVal) {
            if (newVal == true) {
                vm.orgsWritable = $scope.assignedOrgs.writable;
                if (vm.orgsWritable && vm.orgsWritable.length == 1) {
                    vm.currentOrg = vm.orgsWritable[0];
                    vm.filter.org=vm.orgsWritable[0];
                }
            }
        });

        $scope.$watch('vm.filter.org', function (newVal, oldVal) {
            vm.getListStaff();
        });
        vm.getListStaff = function () {
            blockUI.start();
            let orgFilter={organization: vm.filter.org};

            service.getListStaff(orgFilter, function success() {
            }, function failure() {
                blockUI.stop();
            }).then(function (data) {
                //console.log("c3",data);
                vm.staffs = data.content;
                blockUI.stop();
            });
        };

        vm.openAddHTS = function () {
            $state.go('application.hts_add');
        };

        vm.getEntries = function () {
            //blockUI.start();
            service.getAllEntries(vm.filter, function success() {
            }, function failure() {
                //blockUI.stop();
            }).then(function (data) {
                //vm.treeData = data.content;
                //console.log(data);
                let isSiteManager = $scope.isSiteManager($scope.currentUser);
                vm.bsTableControl.options.columns = service.getTableDefinition(isSiteManager);
                vm.bsTableControl.options.data = data.content;
                vm.bsTableControl.options.totalRows = data.totalElements;
                //blockUI.stop();
            });
        }
        vm.getEntries();
        vm.fromDateReport = {
            fpItem: null,
                dateOpts: {
                    altFormat: 'd/m/Y',
                    altInput: true,
                    dateFormat: 'Y-m-dTH:i:S',
                    enableTime: false,
                    placeholder: 'Chọn ngày..',
                    plugins: [new scrollPlugin({})],
                    weekNumbers: true,
                    shorthandCurrentMonth: false,
                    locale: 'vn',
                    position: 'auto',
                    allowInput: true,
                    disable: [
                        function(date) {
                            // return true to disable
                            return (date > new Date());
                        }
                    ],
                    onChange: [function() {
                        if(vm.filter.fromDate>new Date()){
                            toastr.warning('Ngày chọn báo cáo không được lớn hơn ngày hiện tại');
                            focusFlatPick('vm.filter.fromDate');
                            return;
                        }
                        if(vm.filter.toDate<vm.filter.fromDate && vm.filter.toDate){
                            toastr.warning('Ngày kết thúc không được nhỏ hơn ngày bắt đầu');
                            focusFlatPick('vm.filter.fromDate');
                        }
                        
                    }],
                },
                datePostSetup: function(fpItem) {
                    vm.fromDateReport.fpItem = fpItem;
                    if (vm.filter.fromDate && fpItem) {
                        fpItem.setDate(moment(vm.filter.fromDate).toDate());
                    }
                },
                clear: function() {
                    if (vm.fromDateReport.fpItem) {
                        vm.fromDateReport.fpItem.clear();
                        vm.filter.fromDate = null;
                    }
                }
        };

        vm.toDateReport = {
            fpItem: null,
                dateOpts: {
                    altFormat: 'd/m/Y',
                    altInput: true,
                    dateFormat: 'Y-m-dTH:i:S',
                    enableTime: false,
                    placeholder: 'Chọn ngày..',
                    plugins: [new scrollPlugin({})],
                    weekNumbers: true,
                    shorthandCurrentMonth: false,
                    locale: 'vn',
                    position: 'auto',
                    allowInput: true,
                    disable: [
                        function(date) {
                            // return true to disable
                            return (date > new Date());
                        }
                    ],
                    onChange: [function() {
                        if(vm.filter.toDate>new Date()){
                            toastr.warning('Ngày chọn báo cáo không được lớn hơn ngày hiện tại');
                            focusFlatPick('vm.filter.toDate');
                        }
                        if(vm.filter.toDate<vm.filter.fromDate && vm.filter.fromDate){
                            toastr.warning('Ngày kết thúc không được nhỏ hơn ngày bắt đầu');
                            focusFlatPick('vm.filter.toDate');
                        }
                        
                    }],
                },
                datePostSetup: function(fpItem) {
                    vm.toDateReport.fpItem = fpItem;
                    if (vm.filter.toDate && fpItem) {
                        fpItem.setDate(moment(vm.filter.toDate).toDate());
                    }
                },
                clear: function() {
                    if (vm.toDateReport.fpItem) {
                        vm.toDateReport.fpItem.clear();
                        vm.filter.toDate = null;
                    }
                }
        };

        vm.exportHTS = function () {
            let successHandler = function (data, status, headers, config) {
                blockUI.stop();

                headers = headers();

                let filename = headers['x-filename'];
                let contentType = headers['content-type'];

                let linkElement = document.createElement('a');
                try {
                    let blob = new Blob([data], {type: contentType});
                    let url = window.URL.createObjectURL(blob);

                    linkElement.setAttribute('href', url);
                    linkElement.setAttribute("download", filename);

                    let clickEvent = new MouseEvent("click", {
                        "view": window,
                        "bubbles": true,
                        "cancelable": false
                    });
                    linkElement.dispatchEvent(clickEvent);
                } catch (ex) {
                    console.log(ex);
                }
            };
            
            blockUI.start();
            service.exportHTS(vm.filter)
            .success(successHandler)
            .error(function () {
                blockUI.stop();
            });
        };

        vm.bsTableControl = {
            options: {
                data: vm.entries,
                idField: 'id',
                sortable: true,
                striped: true,
                maintainSelected: true,
                clickToSelect: false,
                showColumns: false,
                showToggle: false,
                pagination: true,
                pageSize: vm.filter.pageSize,
                pageList: [5, 10, 25, 50, 100],
                locale: settings.locale,
                sidePagination: 'server',
                columns: service.getTableDefinition(),
                onCheck: function (row, $element) {
                    $scope.$apply(function () {
                        vm.selectedEntries.push(row);
                    });
                },
                onCheckAll: function (rows) {
                    $scope.$apply(function () {
                        vm.selectedEntries = rows;
                    });
                },
                onUncheck: function (row, $element) {
                    let index = utils.indexOf(row, vm.selectedEntries);
                    if (index >= 0) {
                        $scope.$apply(function () {
                            vm.selectedEntries.splice(index, 1);
                        });
                    }
                },
                onUncheckAll: function (rows) {
                    $scope.$apply(function () {
                        vm.selectedEntries = [];
                    });
                },
                onPageChange: function (index, pageSize) {
                    vm.filter.pageSize = pageSize;
                    vm.filter.pageIndex = index - 1;

                    vm.getEntries();
                }
            }
        };
    }

})();
