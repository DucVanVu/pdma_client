/**
 * Created by bizic on 30/8/2016.
 */
(function () {
    'use strict';

    angular.module('PDMA.SNS').service('SNSService', SNSService);

    SNSService.$inject = [
        '$http',
        '$q',
        'settings',
        'Utilities'
    ];

    function SNSService($http, $q, settings, utils) {
        let self = this;
        let baseUrl = settings.api.baseUrl + settings.api.apiV1Url;

        self.getEntry = getEntry;
        self.getMaxSeq = getMaxSeq;
        self.getAllEntries = getAllEntries;
        self.saveEntry = saveEntry;
        self.deleteEntries = deleteEntries;
        self.deleteIdNumber=deleteIdNumber;
        self.checkCode=checkCode;
        self.checkCodeMulti=checkCodeMulti;
        self.getTableDefinition = getTableDefinition;
        self.findByCode=findByCode;
        self.exportList=exportList;
        self.getAdminUnit=getAdminUnit;
        self.getReport=getReport;
        self.exportReport=exportReport;

        function exportReport(filterReport) {
            let url = baseUrl + 'sns/exportReport';
            return $http({
                method: 'POST',
                url: url,
                params: null,
                data: filterReport,
                headers: {'Content-Type': 'application/json; charset=utf-8'},
                cache: false,
                responseType: 'arraybuffer'
            });
        }

        function getReport(reportFilter, successCallback, errorCallback) {
            let url = baseUrl + 'sns/report';

            return utils.resolveAlt(url, 'POST', null, reportFilter, {
                'Content-Type': 'application/json; charset=utf-8'
            }, successCallback, errorCallback);
        }

        function getEntry(id) {
            if (!id) {
                return $q.when(null);
            }

            let url = baseUrl + 'sns/' + id;
            return utils.resolve(url, 'GET', angular.noop, angular.noop);
        }

        function getMaxSeq(orgId) {
            if (!orgId) {
                return $q.when(null);
            }
            let url = baseUrl + 'sns/maxseq/' + orgId;
            return utils.resolve(url, 'GET', angular.noop, angular.noop);
        }


        function getAllEntries(filter) {

            let url = baseUrl + 'sns/list';

            return utils.resolveAlt(url, 'POST', null, filter, {
                'Content-Type': 'application/json; charset=utf-8'
            }, angular.noop, angular.noop);
        }

        function saveEntry(entry, successCallback, errorCallback) {
            let url = baseUrl + 'sns';

            return utils.resolveAlt(url, 'POST', null, entry, {
                'Content-Type': 'application/json; charset=utf-8'
            }, successCallback, errorCallback);
        }

        function deleteEntries(id, successCallback, errorCallback) {
            let url = baseUrl + 'sns/'+id;
            return utils.resolveAlt(url, 'DELETE', null, null, {
                'Content-Type': 'application/json; charset=utf-8'
            }, successCallback, errorCallback);
        }

        function deleteIdNumber(id, successCallback, errorCallback) {
            let url = baseUrl + 'sns_case_id_number/'+id;
            return utils.resolveAlt(url, 'DELETE', null, null, {
                'Content-Type': 'application/json; charset=utf-8'
            }, angular.noop, angular.noop);
        }

        function checkCode(checkCodeDto) {
            let url = baseUrl + 'sns/checkCode';

            return utils.resolveAlt(url, 'POST', null, checkCodeDto, {
                'Content-Type': 'application/json; charset=utf-8'
            }, angular.noop, angular.noop);
        }
        function checkCodeMulti(listCheckCodeDto) {
            let url = baseUrl + 'sns/checkCodeMulti';
            return utils.resolveAlt(url, 'POST', null, listCheckCodeDto, {
                'Content-Type': 'application/json; charset=utf-8'
            }, angular.noop, angular.noop);
        }
        function findByCode(couponCode) {
            let url = baseUrl + 'sns/findByCode/'+couponCode;
            return utils.resolve(url, 'GET', angular.noop, angular.noop);
        }
        function exportList(f) {
            let url = baseUrl + 'sns/export';
            return $http({
                method: 'POST',
                url: url,
                params: null,
                data: f,
                headers: {'Content-Type': 'application/json; charset=utf-8'},
                cache: false,
                responseType: 'arraybuffer'
            });
        }
        function getAdminUnit(filter) {
            let url = baseUrl + 'admin_unit/all';

            return utils.resolveAlt(url, 'POST', null, filter, {
                'Content-Type': 'application/json; charset=utf-8'
            }, angular.noop, angular.noop);
        }

        function getTableDefinition(shouldDisplayCheckbox) {

            let _tableOperation = function (value, row, index) {
                let url = '';

//                url += '<a ui-tooltip="Sửa" class="green-dark margin-right-20" href="#" data-ng-click="$parent.editSNS(' + "'" + row.id + "'" + ')"><i class="icon-pencil margin-right-5 margin-left-5"></i></a>';
//                url += '<a ui-tooltip="Xóa" class="green-dark margin-right-20" href="#" data-ng-click="$parent.deleteSNS(' + "'" + row.id + "'" + ')"><i class="fa fa-trash margin-right-15 margin-left-5"></i></a>';
                url += '<div class="opc-toolbar">';
                url +=     '<a href="#/prevention/sns-edit/'+ row.id +'" class="btn btn-primary no-padding-tb jumping no-border" uib-tooltip="Sửa" tooltip-placement="auto">';
                url +=          '<i class="icon-pencil"></i>';
                url +=     '</a>';
                url +=     '<div class="vertical-seperator shorter float-right"></div>';
                url +=     '<a data-ng-click="$parent.deleteSNS(' + "'" + row.id + "'" + ')" class="btn btn-primary no-padding-tb jumping no-border" uib-tooltip="Xóa" href="#" tooltip-placement="auto">';
                url +=         '<i class="fa fa-trash"></i>';
                url +=     '</a>';
                url += '</div>';
                return url;
            };

            let _tableOpStyle = function (value, row, index, field) {
                return {
                    classes: '',
                    css: {'white-space': 'nowrap', 'width': '50px'}
                };
            };

            let _cellNowrap = function (value, row, index, field) {
                return {
                    classes: '',
                    css: {'white-space': 'nowrap'}
                };
            };

            let _dateFormatter = function (value, row, index) {
                if (!value) {
                    return '';
                }
                return moment(value).format('DD/MM/YYYY');
            };
            let _genderFormatter = function (value, row, index) {
                if(value){
                    if(value=='MALE'){
                        return 'NAM';
                    }
                    else if(value=='FEMALE'){
                        return 'NỮ';
                    }
                    else if(value=='OTHER'){
                        return 'KHÁC';
                    }
                }
                return '';
            };
            let _riskGroupFormatter = function (value, row, index) {
                if(value){
                    if(value=='MSM'){
                        return 'MSM';
                    }
                    else if(value=='NCH'){
                        return 'Bạn tình/bạn chích NCH';
                    }
                    else if(value=='MD'){
                        return 'Mại dâm';
                    }
                    else if(value=='OTHER'){
                        return 'Nhóm khác';
                    }
                    else if(value=='TCMT'){
                        return 'Tiêm chích ma túy';
                    }
                }
                return '';
            };
            let _hivStatusFormatter = function (value, row, index) {
                if(value){
                    if(value=='positive'){
                        return 'Dương tính';
                    }
                    else if(value=='negative'){
                        return 'Âm tính';
                    }
                    else if(value=='undefined'){
                        return 'Không xác định';
                    }
                    else if(value=='notest'){
                        return 'Không làm xét nghiệm';
                    }
                }
                return '';
            };
            let _customerSourceFormatter = function (value, row, index) {
                if(value){
                    if(value=='SNS'){
                        return 'SNS';
                    }
                    else if(value=='VCT_OPC'){
                        return 'VCT/OPC';
                    }
                    else if(value=='CBOs'){
                        return 'CBOs';
                    }
                    else if(value=='OTHER'){
                        return 'Khác/tự đến';
                    }
                }
                return '';
            };
            let _approachMethodFormatter = function (value, row, index) {
                if(value){
                    if(value=='direct'){
                        return 'Trực tiếp';
                    }
                    else if(value=='online'){
                        return 'Trực tuyến';
                    }
                }
                return '';
            };

            let columns = [
                {
                    field: 'state',
                    checkbox: true
                }
                , {
                    field: '',
                    title: 'Thao tác',
                    switchable: true,
                    visible: true,
                    formatter: _tableOperation,
                    cellStyle: _tableOpStyle
                }
                , {
                    field: 'couponCode',
                    title: 'Mã&nbsp;KH',
                    switchable: true,
                    visible: true,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'name',
                    title: 'Tên khách hàng',
                    switchable: false,
                    visible: true,
//                    formatter: _activeFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'yearOfBirth',
                    title: 'Năm sinh',
                    switchable: false,
                    visible: true,
//                    formatter: _dateFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'gender',
                    title: 'Giới tính',
                    switchable: false,
                    visible: true,
                    formatter: _genderFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'firstTimeVisit',
                    title: 'Ngày giới thiệu dịch vụ SNS',
                    switchable: false,
                    visible: true,
                    formatter: _dateFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'riskGroup',
                    title: 'Nhóm nguy cơ',
                    switchable: false,
                    visible: true,
                    formatter: _riskGroupFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'idNumber',
                    title: 'Mã định danh',
                    switchable: false,
                    visible: true,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'hivStatus',
                    title: 'Tình trạng HIV',
                    switchable: false,
                    visible: true,
                    formatter: _hivStatusFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'testDate',
                    title: 'Ngày làm xét nghiệm',
                    switchable: false,
                    visible: true,
                    formatter: _dateFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'customerSource',
                    title: 'Nguồn khách hàng',
                    switchable: false,
                    visible: true,
                    formatter: _customerSourceFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'approachMethod',
                    title: 'Hình thức tiếp cận',
                    switchable: false,
                    visible: true,
                    formatter: _approachMethodFormatter,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'totalCoupon',
                    title: 'Số thẻ phát ra',
                    switchable: false,
                    visible: true,
                    cellStyle: _cellNowrap
                }
                , {
                    field: 'prepDate',
                    title: 'Đăng ký sử dụng PrEP',
                    switchable: false,
                    visible: true,
                    formatter: _dateFormatter,
                    cellStyle: _cellNowrap
                }, {
                     field: 'arvDate',
                     title: 'Đăng ký điều trị ARV',
                     switchable: false,
                     visible: true,
                     formatter: _dateFormatter,
                     cellStyle: _cellNowrap
                 }

            ];

            if (!shouldDisplayCheckbox) {
                columns.shift(); // remove the state column
            }

            return columns;
        }
    }

})();